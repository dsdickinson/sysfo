// This file was generated by Dashcode from Apple Inc.
// You may edit this file to customize your Dashboard widget.

//
// Function: load()
// Called by HTML body element's onload event when the widget is ready to start
//
function load()
{
    setupParts();
	runsysctl(event);
}

//
// Function: remove()
// Called when the widget has been removed from the Dashboard
//
function remove()
{
    // Stop any timers to prevent CPU usage
    // Remove any preferences as needed
    // widget.setPreferenceForKey(null, createInstancePreferenceKey("your-key"));
}

//
// Function: hide()
// Called when the widget has been hidden
//
function hide()
{
    // Stop any timers to prevent CPU usage
}

//
// Function: show()
// Called when the widget has been shown
//
function show()
{
    // Restart any timers that were stopped on hide
}

//
// Function: sync()
// Called when the widget has been synchronized with .Mac
//
function sync()
{
    // Retrieve any preference values that you need to be synchronized here
    // Use this for an instance key's value:
    // instancePreferenceValue = widget.preferenceForKey(null, createInstancePreferenceKey("your-key"));
    //
    // Or this for global key's value:
    // globalPreferenceValue = widget.preferenceForKey(null, "your-key");
}

//
// Function: showBack(event)
// Called when the info button is clicked to show the back of the widget
//
// event: onClick event from the info button
//
function showBack(event)
{
    var front = document.getElementById("front");
    var back = document.getElementById("back");

    if (window.widget) {
        widget.prepareForTransition("ToBack");
    }

    front.style.display = "none";
    back.style.display = "block";

    if (window.widget) {
        setTimeout('widget.performTransition();', 0);
    }
}

//
// Function: showFront(event)
// Called when the done button is clicked from the back of the widget
//
// event: onClick event from the done button
//
function showFront(event)
{
    var front = document.getElementById("front");
    var back = document.getElementById("back");

    if (window.widget) {
        widget.prepareForTransition("ToFront");
    }

    front.style.display="block";
    back.style.display="none";

    if (window.widget) {
        setTimeout('widget.performTransition();', 0);
    }
}

if (window.widget) {
    widget.onremove = remove;
    widget.onhide = hide;
    widget.onshow = show;
    widget.onsync = sync;
}


function runsysctl(event)
{
//	var units = document.getElementById('units').value;
//    var mntpt = document.getElementById('mntpt').value;
	

    var command = "/usr/sbin/sysctl -a";
    var obj = widget.system(command, null);
	var output = obj.outputString;
	
	var lines = [];
	lines = output.split("\n");
	var value = "";
	
	var regexps =  [
					"kern.ostype = ", 
					"kern.osrelease = ", 
					"kern.osrevision = ", 
					"kern.version = ", 
					"kern.hostname = ",	
					"hw.model = ", 
					"hw.ncpu = ", 
					"hw.busfrequency = ", 
					"hw.cpufrequency = ", 
					"hw.physmem = ", 
					"hw.usermem = ", 
					"hw.memsize = ", 
					"kern.osversion = ", 
					"machdep.cpu.address_bits.virtual: ",
					"machdep.cpu.address_bits.physical: ", 
					"machdep.cpu.brand_string: ", 
					"machdep.cpu.vendor: "
					];
	for (var i=0; i<lines.length; i++) {
	    for (var j=0; j<regexps.length; j++) {
			re = eval("/"+regexps[j]+"/");
			if (re.test(lines[i])) {				
				value = getvalue(lines[i]);
				item = regexps[j].replace(" = ", "", "");			
				item = item.replace(": ", "", "");					
				item = item.replace(/\./g, "_");	
				eval("document.getElementById('"+item+"').innerHTML = '" + value + "'");				
				break;
			}		
		}
	}	
}

function getvalue(line) {
    var results = [];
	
	re1 = / = /;
	re2 = /: /;	
	if (re1.test(line)) {	
        results = line.split(" = ");	
	} else if (re2.test(line)) {	
        results = line.split(": ");
    } else {
	    results[1] = "error";
	}
	
	re3 = /machdep.cpu.address_bits.virtual/;
	re4 = /machdep.cpu.address_bits.physical/;
	if (re3.test(line) || re4.test(line)) {
		if (re3.test(line)) {
			type = "virtual";
		}
		if (re4.test(line)) {
			type = "physical";
		}		
	    results[1] = results[1] + " bit (" + type + ")";
	}
	
	return (results[1]);
}
