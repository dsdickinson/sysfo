/*
    SysfO - Mac OSX widget that displays various system information.
    Copyright (C) 2009  Steve Dickinson  dsdickinson@mac.com

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program (see COPYING file).  If not, see <http://www.gnu.org/licenses/>.
*/

// This file was generated by Dashcode from Apple Inc.
// You may edit this file to customize your Dashboard widget.

var curr_front = 1;
var curr_back = 0;

//
// Function: load()
// Called by HTML body element's onload event when the widget is ready to start
//
function load()
{
    setupParts();
	runsysctl(event);
}

//
// Function: remove()
// Called when the widget has been removed from the Dashboard
//
function remove()
{
    // Stop any timers to prevent CPU usage
    // Remove any preferences as needed
    // widget.setPreferenceForKey(null, createInstancePreferenceKey("your-key"));
}

//
// Function: hide()
// Called when the widget has been hidden
//
function hide()
{
    // Stop any timers to prevent CPU usage
}

//
// Function: show()
// Called when the widget has been shown
//
function show()
{
    // Restart any timers that were stopped on hide
}

//
// Function: sync()
// Called when the widget has been synchronized with .Mac
//
function sync()
{
    // Retrieve any preference values that you need to be synchronized here
    // Use this for an instance key's value:
    // instancePreferenceValue = widget.preferenceForKey(null, createInstancePreferenceKey("your-key"));
    //
    // Or this for global key's value:
    // globalPreferenceValue = widget.preferenceForKey(null, "your-key");
}

//
// Function: showBack(event)
// Called when the info button is clicked to show the back of the widget
//
// event: onClick event from the info button
//
function showBack(event)
{
    curr_front = 0;
	curr_back = 1;
	
    var front = document.getElementById("front");
    var back = document.getElementById("back");

    if (window.widget) {
        widget.prepareForTransition("ToBack");
    }
	
	//	window.resizeTo("294", "256");	
//		window.resizeTo(-19,0);	
//		window.resizeBy("-20", "0");		

    front.style.display = "none";
    back.style.display = "block";

    if (window.widget) {
        setTimeout('widget.performTransition();', 0);
    }
	
    
}

//
// Function: showFront(event)
// Called when the done button is clicked from the back of the widget
//
// event: onClick event from the done button
//
function showFront(event)
{
    curr_front = 1;
	curr_back = 0;
	
    var front = document.getElementById("front");
    var back = document.getElementById("back");
	
    if (window.widget) {
        widget.prepareForTransition("ToFront");
    }

    front.style.display="block";
    back.style.display="none";
//	window.resizeTo("694", "256");
    if (window.widget) {
        setTimeout('widget.performTransition();', 0);
    }

}

if (window.widget) {
    widget.onremove = remove;
    widget.onhide = hide;
    widget.onshow = show;
    widget.onsync = sync;
}


function runsysctl(event)
{
	var displays = new Array();			
	displays["kern_ostype"] = widget.system("/usr/sbin/sysctl -n kern.ostype", null).outputString; 
	displays["kern_osrelease"] = widget.system("/usr/sbin/sysctl -n kern.osrelease", null).outputString;
	displays["kern_osrevision"] = widget.system("/usr/sbin/sysctl -n kern.osrevision", null).outputString;
	displays["kern_version"] = widget.system("/usr/sbin/sysctl -n kern.version", null).outputString;
	displays["kern_hostname"] = widget.system("/usr/sbin/sysctl -n kern.hostname", null).outputString;	
	displays["hw_model"] = widget.system("/usr/sbin/sysctl -n hw.model", null).outputString;
	displays["hw_ncpu"] = widget.system("/usr/sbin/sysctl -n hw.ncpu", null).outputString; 
	displays["hw_busfrequency"] = widget.system("/usr/sbin/sysctl -n hw.busfrequency", null).outputString;
	displays["hw_cpufrequency"] = widget.system("/usr/sbin/sysctl -n hw.cpufrequency", null).outputString;
	displays["hw_physmem"] = widget.system("/usr/sbin/sysctl -n hw.physmem", null).outputString;
	displays["hw_usermem"] = widget.system("/usr/sbin/sysctl -n hw.usermem", null).outputString;
	displays["hw_memsize"] = widget.system("/usr/sbin/sysctl -n hw.memsize", null).outputString;
	displays["kern_osversion"] = widget.system("/usr/sbin/sysctl -n kern.osversion", null).outputString; 
	displays["machdep_cpu_address_bits_virtual"] = widget.system("/usr/sbin/sysctl -n machdep.cpu.address_bits.virtual", null).outputString;
	displays["machdep_cpu_address_bits_physical"] = widget.system("/usr/sbin/sysctl -n machdep.cpu.address_bits.physical", null).outputString;
	displays["machdep_cpu_brand_string"] = widget.system("/usr/sbin/sysctl -n machdep.cpu.brand_string", null).outputString; 
	displays["machdep_cpu_vendor"] = widget.system("/usr/sbin/sysctl -n machdep.cpu.vendor", null).outputString;	

	var value;
	for (var item in displays) {		
		value = displays[item].replace(/\n$/g,"");		
		
		re1 = /machdep.cpu.address_bits.virtual/;
		re2 = /machdep.cpu.address_bits.physical/;
		if (re1.test(item) || re2.test(item)) {
			if (re1.test(item)) {
				type = "virtual";
			}
			if (re2.test(item)) {
				type = "physical";
			}		
			value = value + " bit (" + type + ")";
		}			
		re3 = /hw_cpufrequency/;
		re4 = /hw_busfrequency/;
		re5 = /hw_memsize/;
		re6 = /hw_physmem/;	
		re7 = /hw_usermem/;				
		if (re3.test(item) || re4.test(item)) {		
			conversion = unit_convert(value, 'freq');
			value = value + " (" + conversion + ")";
		}		
		if (re5.test(item) || re6.test(item) || re7.test(item)) {		
			conversion = unit_convert(value, 'bit');
			value = value + " (" + conversion + ")";
		}							
	    eval("document.getElementById('" + item + "').innerHTML = '" + value + "'");
	}	
}


function unit_convert (bytes, type) {

	var units;
	if (type == 'freq') {
        units = new Array('BHz', 'KHz', 'MHz', 'GHz', 'THz', 'PHz');		
	} else {
        units = new Array('B', 'KB', 'MB', 'GB', 'TB', 'PB');	
	}

	var converted;
	var re8 = /\./;

    for (var i = 0; i < units.length; i++) {
        if ((bytes/Math.pow(1024, i)) >= 1) {
//			if (type == 'freq') {
//				converted = Math.round(bytes/Math.pow(1024, i), 1)			
//			}		
//			if (type == 'bit') {
  			    converted = bytes/Math.pow(1024, i);	
				if (re8.test(converted)) {
//				    alert (bytes + ' ' + converted);
					converted = converted.toFixed(2);
				}
//			}	
			converted = converted + ' ' + units[i];
		}
    }

    return converted;
}

 function keyHandler(e)
 {
     var pressedKey;  
     if (window.event) pressedKey = window.event.keyCode;  
     else if (e) pressedKey = e.which;  
     var e = e || window.event;  
	 
	 // RETURN	 	 
 	 if (pressedKey == 13) {
	     runsysctl(event);
	 } 	 
	 
	 // CTRL + i
     if (pressedKey == 73 && e.ctrlKey){  
	     if (curr_front == 1) {
		     showBack();	    
	     } else if (curr_back == 1) {
		     showFront();	    
	     }	 
     }  
 }
document.onkeydown = keyHandler;

function showCodeUni(event)
{
    widget.openURL("http://www.codeuniversity.com");
}

function selectCodeUni(event) 
{
	document.getElementById('text4').style.cursor = "pointer";
}

function selectRun(event) 
{
	document.getElementById('glassbutton').style.cursor = "pointer";
}

function selectDone(event) 
{
	document.getElementById('done').style.cursor = "pointer";
}
